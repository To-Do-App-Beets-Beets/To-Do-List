// TODO: Importe as inst√¢ncias 'db' e 'auth' do seu arquivo de configura√ß√£o do Firebase.

/**
 * ======================================================================================
 * Camada de Reposit√≥rio (Repository)
 * ======================================================================================
 *
 * Prop√≥sito:
 * ----------
 * O Repository √© a camada respons√°vel EXCLUSIVAMENTE pela comunica√ß√£o com o banco de
 * dados. Ele abstrai toda a l√≥gica de como os dados s√£o salvos, buscados, atualizados
 * ou deletados.
 *
 * Pense nele como um "tradutor": o resto da sua aplica√ß√£o fala em termos de "usu√°rios",
 * e o reposit√≥rio traduz isso para a linguagem do Firestore ("documents", "collections",
 * "get", "set", "update").
 *
 * Vantagens:
 * -----------
 * - Separa√ß√£o de Responsabilidades: A l√≥gica de neg√≥cio n√£o precisa saber se voc√™ usa
 * Firestore, SQL ou qualquer outro banco.
 * - Facilidade de Manuten√ß√£o: Se um dia voc√™ mudar de banco, s√≥ precisar√° reescrever
 * os reposit√≥rios, sem tocar nas outras camadas!
 */
class UserRepository {
  constructor() {
    // A cole√ß√£o de 'users' no Firestore √© onde guardaremos os perfis dos usu√°rios.
    // TODO: Inicialize 'this.collection' para apontar para a cole√ß√£o 'users' do Firestore.
    // Dica: use a inst√¢ncia 'db' que voc√™ importou, que possui um m√©todo pr√≥prio para isso.
    this.collection = null; // Substitua null pela sua implementa√ß√£o
  }

  /**
   * Cria o documento de perfil de um usu√°rio no Firestore.
   * @param {object} data - Cont√©m os dados do usu√°rio (id, name, email, role).
   * O 'id' AQUI deve ser o mesmo 'uid' do Firebase Authentication.
   */
  async create(data) {
    try {
      // üéØ Objetivo: Salvar os dados de perfil de um novo usu√°rio.
      // O usu√°rio j√° foi criado no Firebase Auth (geralmente pelo front-end).
      // Nossa tarefa aqui √© criar um documento no Firestore com informa√ß√µes
      // adicionais (como nome, cargo, data de cria√ß√£o, etc.), usando o ID
      // do Auth como chave do documento para manter a consist√™ncia.

      // TODO: Crie um objeto 'userData' com os campos a serem salvos.
      // Inclua: name, email, role (com 'user' como padr√£o), createdAt e updatedAt.

      // TODO: Use 'this.collection.doc(data.id).set(userData)' para salvar os dados.
      // Usar .set() garante que o documento seja criado com o ID que especificamos.

      // TODO: Retorne o objeto completo do usu√°rio rec√©m-criado.
      return null;
    } catch (error) {
      // TODO: Em caso de erro, lance uma nova exce√ß√£o para ser capturada pela camada de Servi√ßo.
      throw new Error(error.message);
    }
  }

  /**
   * Busca todos os usu√°rios da cole√ß√£o.
   */
  async findAll() {
    try {
      // üéØ Objetivo: Listar todos os perfis de usu√°rio do Firestore.
      // TODO: Use 'this.collection.get()' para obter um "snapshot" (uma foto) de todos
      // os documentos na cole√ß√£o de usu√°rios. Lembre-se do 'await'.

      // TODO: O resultado ('snapshot') cont√©m uma propriedade 'docs'. Mapeie esse array
      // para transformar cada 'doc' em um objeto de usu√°rio mais limpo, contendo o
      // 'id' do documento e seus dados (...doc.data()).
      return [];
    } catch (error) {
      throw new Error(error.message);
    }
  }

  /**
   * Busca um √∫nico usu√°rio pelo seu ID.
   * @param {string} id - O ID do usu√°rio (deve ser o mesmo do Firebase Auth).
   */
  async findById(id) {
    try {
      // üéØ Objetivo: Encontrar um perfil de usu√°rio espec√≠fico.
      // TODO: Obtenha a refer√™ncia do documento usando 'this.collection.doc(id)'
      // e ent√£o chame '.get()' para buscar os dados.

      // TODO: Verifique se o documento existe ('doc.exists'). Se n√£o existir, retorne null.

      // TODO: Se existir, retorne um objeto com o id e os dados do documento.
      return null;
    } catch (error) {
      throw new Error(error.message);
    }
  }

  /**
   * Atualiza os dados de um usu√°rio.
   * @param {string} id - O ID do usu√°rio a ser atualizado.
   * @param {object} data - Um objeto com os campos a serem modificados.
   */
  async update(id, data) {
    try {
      // üéØ Objetivo: Modificar os campos de um perfil de usu√°rio existente.
      // TODO: Crie um objeto 'updateData' contendo os novos dados ('...data') e
      // atualize o campo 'updatedAt' para a data/hora atual.

      // TODO: Use 'this.collection.doc(id).update(updateData)' para aplicar as
      // modifica√ß√µes no Firestore. O '.update()' modifica apenas os campos
      // que voc√™ enviar, sem apagar os outros.
      
      // TODO: Retorne o objeto do usu√°rio com os dados atualizados.
      return null;
    } catch (error) {
      throw new Error(error.message);
    }
  }

  /**
   * Deleta um usu√°rio do Firebase Auth e do Firestore.
   * @param {string} id - O ID do usu√°rio a ser deletado.
   */
  async delete(id) {
    try {
      // üéØ Objetivo: Remover completamente um usu√°rio do sistema.
      // Esta √© uma opera√ß√£o cr√≠tica que deve ser feita em dois lugares:
      // 1. Firebase Authentication: Remove o login, senha e a capacidade do usu√°rio de se autenticar.
      // 2. Firestore: Remove o documento de perfil com dados adicionais.
      
      // Usamos Promise.all para executar as duas exclus√µes em paralelo, o que √© mais eficiente.
      // TODO: Dentro de um 'Promise.all', chame 'auth.deleteUser(id)' e
      // 'this.collection.doc(id).delete()'.

    } catch (error) {
      throw new Error(error.message);
    }
  }
}

module.exports = { UserRepository };