const { Router } = require('express');
// TODO: Importe o 'usersRouter' do arquivo de rotas de usu√°rios.
// TODO: Importe o 'authMiddleware'.

const router = Router();

/**
 * ======================================================================================
 * Roteador Principal (Main Router)
 * ======================================================================================
 *
 * Prop√≥sito:
 * ----------
 * Este √© o roteador principal da aplica√ß√£o. Sua fun√ß√£o √© "montar" todos os outros
 * roteadores espec√≠ficos (como o de usu√°rios, produtos, etc.) em um √∫nico lugar.
 *
 * No arquivo principal do servidor (server.js), n√≥s usaremos apenas este 'router',
 * mantendo o c√≥digo de inicializa√ß√£o limpo e organizado.
 */

// üéØ Objetivo: Registrar todas as rotas de usu√°rios sob o prefixo '/users'.
// Isso significa que as rotas definidas em 'users.js' (como GET '/' e GET '/:id')
// se tornar√£o acess√≠veis como GET '/users' e GET '/users/:id'.
// TODO: Use 'router.use()' para associar o caminho '/users' ao 'usersRouter'.


// --------------------------------------------------------------------------------
// Exemplo de Rota Protegida Adicional
// --------------------------------------------------------------------------------

// Esta rota √© um √≥timo exemplo do poder do middleware de autentica√ß√£o.
// A rota '/me' permite que o usu√°rio logado obtenha seus pr√≥prios dados.
// Como o 'authMiddleware' √© executado primeiro, quando o c√≥digo dentro da rota
// √© executado, n√≥s j√° temos acesso a 'req.user' com os dados do token.
// TODO: Crie uma rota GET para '/me'. Aplique o 'authMiddleware' e, na fun√ß√£o
// de callback, retorne os dados do 'req.user' em formato JSON.
// Lembre-se de verificar se 'req.user' existe antes de us√°-lo.

module.exports = { router };