// TODO: Etapa 0 - Importar o 'auth' do Firebase Admin SDK
// Pense: de qual arquivo de configura√ß√£o do nosso projeto ele vem?
// Ex: const { auth } = require('../config/firebase');

/**
 * ======================================================================================
 * Middleware de Autentica√ß√£o
 * ======================================================================================
 *
 * O que √© um Middleware?
 * ---------------------
 * Pense em um middleware como um "porteiro" ou um "seguran√ßa" no meio de uma requisi√ß√£o
 * da web. Antes que uma requisi√ß√£o (ex: buscar dados do usu√°rio) chegue ao seu destino
 * final (a fun√ß√£o que busca os dados no banco), ela passa por ele.
 *
 * Este middleware espec√≠fico, o 'authMiddleware', tem uma √∫nica miss√£o: verificar se o
 * usu√°rio que fez a requisi√ß√£o est√° autenticado e tem permiss√£o para continuar.
 *
 * Como ele funciona?
 * ------------------
 * Ele espera que o cliente (o app mobile ou web) envie um "crach√°" especial junto com
 * a requisi√ß√£o. Esse crach√° √© um ID Token gerado pelo Firebase. Nossa fun√ß√£o √© pegar
 * esse crach√°, verificar com o Firebase se ele √© aut√™ntico e, se for, liberar o acesso.
 *
 * Par√¢metros da Fun√ß√£o:
 * ---------------------
 * @param {object} req - O objeto 'Request' (Requisi√ß√£o). Cont√©m todas as informa√ß√µes
 * que o cliente enviou: cabe√ßalhos (headers), corpo (body),
 * par√¢metros da URL, etc. √â aqui que vamos procurar o token.
 *
 * @param {object} res - O objeto 'Response' (Resposta). √â o que usamos para enviar
 * uma resposta de volta ao cliente. Com ele, podemos definir o
 * status da resposta (ex: 200 para OK, 403 para Proibido) e
 * enviar dados (geralmente em formato JSON).
 *
 * @param {function} next - Uma fun√ß√£o especial. Ao cham√°-la (`next()`), dizemos ao
 * Express: "Ok, este middleware terminou seu trabalho. Pode
 * passar a requisi√ß√£o para o pr√≥ximo da fila (outro
 * middleware ou a rota final)". Se n√£o a chamarmos, a
 * requisi√ß√£o ficar√° "presa" aqui para sempre.
 */
async function authMiddleware(req, res, next) {
  // O fluxo de valida√ß√£o de um token acontece dentro de um bloco try...catch.
  // Isso √© importante porque a verifica√ß√£o do token pode falhar por v√°rias raz√µes
  // (token mal formatado, expirado, assinatura inv√°lida), e queremos capturar
  // esses erros de forma controlada.
  try {
    // üéØ Objetivo 1: Obter o token do cabe√ßalho da requisi√ß√£o.
    // Por conven√ß√£o, tokens de autentica√ß√£o s√£o enviados no cabe√ßalho 'Authorization'.
    // O formato padr√£o √©: "Bearer [TOKEN_GIGANTE_AQUI]".
    // TODO: Extraia o cabe√ßalho 'authorization' do objeto 'req.headers'.
    const authHeader = null; // Substitua null pela sua implementa√ß√£o

    // üéØ Objetivo 2: Validar se o cabe√ßalho est√° no formato esperado.
    // Se n√£o houver cabe√ßalho ou se ele n√£o come√ßar com "Bearer ", o cliente
    // n√£o enviou o token corretamente. Nesse caso, devemos negar o acesso.
    // TODO: Verifique se 'authHeader' existe e se come√ßa com 'Bearer '.
    // Se n√£o for v√°lido, retorne uma resposta de status 401 (Unauthorized)
    // com uma mensagem de erro em JSON. Lembre-se de usar 'return' para
    // parar a execu√ß√£o da fun√ß√£o aqui.
    // Ex de resposta: res.status(401).json({ error: 'Formato de token inv√°lido.' });


    // üéØ Objetivo 3: Extrair o token limpo.
    // Agora que sabemos que o cabe√ßalho existe e tem o formato correto,
    // precisamos pegar apenas a parte do token, descartando o "Bearer ".
    // TODO: Use uma fun√ß√£o de string para separar o 'Bearer ' do resto.
    const token = null; // Substitua null pela sua implementa√ß√£o

    // üéØ Objetivo 4: Verificar a validade do token com o Firebase.
    // Esta √© a parte principal. Usamos o SDK do Firebase Admin para pedir que ele
    // verifique se o token √© leg√≠timo. Se for, ele nos devolver√° os dados
    // do usu√°rio contidos no token (como uid, email, etc.).
    // TODO: Use a fun√ß√£o 'auth.verifyIdToken()' passando o token extra√≠do.
    // Lembre-se que esta fun√ß√£o √© ass√≠ncrona, ent√£o use 'await'.
    const decodedToken = null; // Substitua null pela sua implementa√ß√£o

    // üéØ Objetivo 5: Anexar os dados do usu√°rio √† requisi√ß√£o.
    // Este √© o passo que torna o middleware realmente √∫til! Ao adicionar os dados
    // decodificados ao objeto 'req', qualquer rota que execute *depois* deste
    // middleware poder√° acessar `req.user` para saber quem √© o usu√°rio autenticado.
    // TODO: Crie uma nova propriedade em 'req', chamada 'user', e atribua a ela o
    // valor de 'decodedToken'.


    // üöÄ Miss√£o Cumprida! Acesso liberado.
    // Se chegamos at√© aqui, o token √© v√°lido e o usu√°rio est√° autenticado.
    // TODO: Retorne a fun√ß√£o 'next()' para passar a requisi√ß√£o para a pr√≥xima etapa.


  } catch (error) {
    // ‚ùå Algo deu errado na verifica√ß√£o do token.
    // Isso pode acontecer se o token for expirado, inv√°lido ou adulterado.
    // Por seguran√ßa, devemos negar o acesso.

    // TODO: Logue o erro no console para fins de depura√ß√£o. √â importante para n√≥s,
    // desenvolvedores, sabermos por que a autentica√ß√£o falhou.
    // Ex: console.error('Falha na autentica√ß√£o:', error.message);

    // TODO: Retorne uma resposta de status *** (O c√≥digo de Forbidden, pesquise!) para o cliente,
    // informando que o acesso foi negado.
    return res.status().json({ error: 'Acesso negado. Token inv√°lido ou expirado.' });
  }
}

module.exports = { authMiddleware };