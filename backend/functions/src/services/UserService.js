// TODO: Importe o UserRepository.

/**
 * ======================================================================================
 * Camada de Servi√ßo (Service)
 * ======================================================================================
 *
 * Prop√≥sito:
 * ----------
 * O Service √© o "c√©rebro" da sua aplica√ß√£o. Ele cont√©m a L√ìGICA DE NEG√ìCIO.
 * Enquanto o Controller lida com HTTP e o Repository com o banco de dados, o Service
 * orquestra as opera√ß√µes e aplica as regras.
 *
 * Exemplos de regras de neg√≥cio:
 * - "Um usu√°rio n√£o pode ser criado se o e-mail j√° existir."
 * - "Para atualizar um perfil, o usu√°rio precisa ter permiss√£o."
 * - "Ao deletar um produto, tamb√©m devemos remover suas avalia√ß√µes associadas."
 *
 * O Service chama um ou mais m√©todos do Repository para executar as tarefas.
 */
class UserService {
  constructor() {
    // TODO: Crie uma inst√¢ncia da classe UserRepository.
    this.userRepository = null; // Substitua null pela sua implementa√ß√£o
  }

  async create(data) {
    // üéØ Objetivo: Aplicar as regras de neg√≥cio para criar um novo usu√°rio.
    // TODO: Valide os dados recebidos. Verifique se 'data.id', 'data.name' e
    // 'data.email' s√£o obrigat√≥rios. Se algum faltar, lance um erro.

    // TODO: Chame o reposit√≥rio para verificar se um usu√°rio com este ID j√° existe.
    // Use 'this.userRepository.findById(data.id)'. Se j√° existir, lance um erro
    // para impedir a cria√ß√£o de duplicados.

    // Se todas as valida√ß√µes passarem, pe√ßa ao reposit√≥rio para criar o usu√°rio.
    // TODO: Chame 'this.userRepository.create(data)' e retorne o resultado.
    return null;
  }

  async findAll() {
    // Para esta opera√ß√£o, n√£o h√° regras de neg√≥cio complexas, ent√£o apenas
    // repassamos a chamada para o reposit√≥rio.
    // TODO: Chame o m√©todo 'findAll' do seu reposit√≥rio e retorne o resultado.
    return [];
  }

  async findById(id) {
    // üéØ Objetivo: Encontrar um usu√°rio e garantir que ele existe.
    // TODO: Chame 'this.userRepository.findById(id)'.
    // TODO: Verifique se o resultado √© nulo (usu√°rio n√£o encontrado). Se for,
    // lance um erro com a mensagem "Usu√°rio n√£o encontrado".
    // Caso contr√°rio, retorne o usu√°rio encontrado.
    return null;
  }

  async update(id, data) {
    // üéØ Objetivo: Aplicar regras de neg√≥cio para atualizar um usu√°rio.
    // TODO: Verifique se o objeto 'data' n√£o est√° vazio. Se estiver, n√£o h√° nada
    // para atualizar, ent√£o lance um erro.

    // TODO: Antes de atualizar, verifique se o usu√°rio realmente existe.
    // Reutilize o m√©todo 'this.userRepository.findById(id)'. Se n√£o existir,
    // o reposit√≥rio lan√ßar√° um erro ou retornar√° nulo (sua l√≥gica decidir√°).
    
    // Se o usu√°rio existe e h√° dados para atualizar, chame o reposit√≥rio.
    // TODO: Chame 'this.userRepository.update(id, data)' e retorne o resultado.
    return null;
  }

  async delete(id) {
    // üéØ Objetivo: Orquestrar a exclus√£o de um usu√°rio.
    // TODO: Verifique se o usu√°rio existe antes de tentar delet√°-lo.
    // Voc√™ pode usar 'this.userRepository.findById(id)'.
    
    // Se o usu√°rio existir, pe√ßa ao reposit√≥rio para delet√°-lo.
    // TODO: Chame 'this.userRepository.delete(id)'. Este m√©todo n√£o retorna nada.
  }
}

module.exports = { UserService };